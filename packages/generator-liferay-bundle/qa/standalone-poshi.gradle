apply plugin: "java"

configurations {
    poshiRunner
}

dependencies {
	poshiRunner "com.liferay:com.liferay.poshi.runner:1.0.210"

//      OPTIONAL the following adds a poshi-resource jar into the classpath during execution
//      To execute any testcase or macro from this jar, use 'Portal' as the namespace, (i.e Portal.PortalSmoke#Smoke)

//  poshiRunner "com.liferay.poshi.runner.resources:portal-7.1.x:7.1.1-ga2"
}

repositories {
	mavenLocal()

	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}

task checkPoshiRunnerExtPropertyFileNames {
	if (!project.hasProperty("poshiRunnerExtPropertyFileNames")) {
		println "No poshi runner ext property file names provided, defaulting to null"

		project.ext.poshiRunnerExtPropertyFileNames = null
	}
	else {
		println "Poshi Runner ext property file names: "
		println poshiRunnerExtPropertyFileNames
	}
}

task expandPoshiRunner(type: Copy) {
    File poshiRunnerJar = findPoshiRunnerJar()

    if (poshiRunnerJar == null) {
        throw new Exception("The Poshi Runner jar cannot be found from dependencies")
    }

    from zipTree(poshiRunnerJar)
    into "$buildDir/poshi-runner"
}

task help {
    println "Format to execute poshi tasks: "
    println "./gradlew -P<property=value> <task>"
    println ""
    println "Format to provide property files for poshi tasks: "
    println "./gradlew -PposhiRunnerExtPropertyFileNames=file1,file2 <task>"
    println ""
    println "Run './gradlew tasks' to see the list of available tasks"
    println ""
}

task runPoshi (type: Test) {
    classpath = configurations.poshiRunner
    include 'com/liferay/poshi/runner/PoshiRunner.class'
    scanForTestClasses = false
    systemProperties getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames)
    testClassesDir = new File("$buildDir/poshi-runner")
}

task validatePoshi (type: JavaExec) {
    main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
    workingDir = "."
    classpath = configurations.poshiRunner
    args('validatePoshi')
    systemProperties = [
    	poshiRunnerExtPropertyFileNames: poshiRunnerExtPropertyFileNames
    ]
}

task writePoshiProperties (type: JavaExec) {
    main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
    workingDir = "."
    classpath = configurations.poshiRunner
    args('writePoshiProperties')
    systemProperties = [
    	poshiRunnerExtPropertyFileNames: poshiRunnerExtPropertyFileNames
    ]
}

def findPoshiRunnerJar() {
     Iterator<File> iterator = configurations.poshiRunner.iterator();

      while (iterator.hasNext()) {
        File file = iterator.next();

        String fileName = file.getName();

        if (fileName.startsWith("com.liferay.poshi.runner-")) {
            return file;
        }
      }

      return null;
}

def getPoshiRunnerExtProperties(poshiRunnerExtPropertyFileNames) {
    Properties poshiRunnerExtProperties = System.getProperties();

    if (poshiRunnerExtPropertyFileNames != null) {
        for (String poshiRunnerExtPropertyFileName : poshiRunnerExtPropertyFileNames.split(",")) {
            try {
                InputStream inputStream = new FileInputStream(
                    poshiRunnerExtPropertyFileName);

                poshiRunnerExtProperties.load(inputStream);
            }
            catch (Exception e) {
                e.printStackTrace();

                throw e;
            }
        }
    }

    return poshiRunnerExtProperties
}

expandPoshiRunner.dependsOn clean
runPoshi.dependsOn expandPoshiRunner
validatePoshi.dependsOn checkPoshiRunnerExtPropertyFileNames
writePoshiProperties.dependsOn validatePoshi