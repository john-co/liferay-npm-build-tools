apply plugin: "java"

configurations {
    poshiRunner
}

dependencies {
	poshiRunner "com.liferay:com.liferay.poshi.runner:1.0.199"
}

repositories {
	mavenLocal()

	maven {
		url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
	}
}

task checkPoshiRunnerExtPropertyFileNames {
	if (!project.hasProperty("poshiRunnerExtPropertyFileNames")) {
		println "No poshi runner ext property file names provided, defaulting to null"

		project.ext.poshiRunnerExtPropertyFileNames = null
	}
	else {
		println "Poshi runner ext property file names: "
		println poshiRunnerExtPropertyFileNames
	}
}

task help {
    println "Format to execute poshi tasks: "
    println "./gradlew -P<property=value> <task>"
    println ""
    println "Format to provide property files for poshi tasks: "
    println "./gradlew -PposhiRunnerExtPropertyFileNames=file1,file2 <task>"
    println ""
    println "Run './gradlew tasks' to see the list of available tasks"
    println ""
}

task runPoshi (type: JavaExec) {
    main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
    workingDir = "."
    classpath = configurations.poshiRunner
    args('runPoshi')
    systemProperties = [
    	poshiRunnerExtPropertyFileNames: poshiRunnerExtPropertyFileNames
    ]
}

task validatePoshi (type: JavaExec) {
    main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
    workingDir = "."
    classpath = configurations.poshiRunner
    args('validatePoshi')
    systemProperties = [
    	poshiRunnerExtPropertyFileNames: poshiRunnerExtPropertyFileNames
    ]
}

task writePoshiProperties (type: JavaExec) {
    main = "com.liferay.poshi.runner.PoshiRunnerCommandExecutor"
    workingDir = "."
    classpath = configurations.poshiRunner
    args('writePoshiProperties')
    systemProperties = [
    	poshiRunnerExtPropertyFileNames: poshiRunnerExtPropertyFileNames
    ]
}

runPoshi.dependsOn validatePoshi
validatePoshi.dependsOn checkPoshiRunnerExtPropertyFileNames
writePoshiProperties.dependsOn validatePoshi